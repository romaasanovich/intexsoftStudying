{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-author/add-author.component.css","webpack:///./src/app/add-author/add-author.component.html","webpack:///./src/app/add-author/add-author.component.ts","webpack:///./src/app/add-book/add-book.component.css","webpack:///./src/app/add-book/add-book.component.html","webpack:///./src/app/add-book/add-book.component.ts","webpack:///./src/app/add-publisher/add-publisher.component.css","webpack:///./src/app/add-publisher/add-publisher.component.html","webpack:///./src/app/add-publisher/add-publisher.component.ts","webpack:///./src/app/app-routing/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/author/author.component.css","webpack:///./src/app/author/author.component.html","webpack:///./src/app/author/author.component.ts","webpack:///./src/app/author/author.service.ts","webpack:///./src/app/book-review/book-review.component.css","webpack:///./src/app/book-review/book-review.component.html","webpack:///./src/app/book-review/book-review.component.ts","webpack:///./src/app/book-review/book-review.service.ts","webpack:///./src/app/book/book.component.html","webpack:///./src/app/book/book.component.ts","webpack:///./src/app/book/book.service.ts","webpack:///./src/app/entity/author.model.ts","webpack:///./src/app/entity/book.model.ts","webpack:///./src/app/entity/publisher.model.ts","webpack:///./src/app/import/import.component.css","webpack:///./src/app/import/import.component.html","webpack:///./src/app/import/import.component.ts","webpack:///./src/app/import/import.service.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/login.service.ts","webpack:///./src/app/publisher/publisher.component.css","webpack:///./src/app/publisher/publisher.component.html","webpack:///./src/app/publisher/publisher.component.ts","webpack:///./src/app/publisher/publisher.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"label {\\n    display: inline-block;\\n    float: left;\\n    clear: left;\\n    width: 75px;\\n    text-align: left;\\n}\\n\\ninput {\\n    display: inline-block;\\n    float: left;\\n}\\n\\n.form-group {\\n    line-height: 1.5;\\n}\\n\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n    <h2 class=\\\"text-center\\\">Add Author</h2>\\n\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"author.name\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Bio\\\" [(ngModel)]=\\\"author.bio\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field>\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Birth Day\\\" [(ngModel)]=\\\"author.birthDay\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #picker></mat-datepicker>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <button mat-raised-button (click)=\\\"addAuthor()\\\" color=\\\"primary\\\">Add Author</button>\\n    </div>\\n\\n</div>\\n\"","import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Author} from '../entity/author.model';\nimport {AuthorService} from '../author/author.service';\n\n@Component({\n    selector: 'app-add-author',\n    templateUrl: './add-author.component.html',\n    styleUrls: ['./add-author.component.css']\n})\nexport class AddAuthorComponent {\n\n    birthDay;\n    author: Author = new Author();\n\n    constructor(private router: Router, private authorService: AuthorService) {\n    }\n\n    addAuthor(): void {\n        this.authorService.addAuthor(this.author).subscribe(data => {\n            alert('Author created successfully.');\n        });\n    }\n}\n","module.exports = \"label {\\n    display: inline-block;\\n    float: left;\\n    clear: left;\\n    width: 100px;\\n    text-align: left;\\n}\\n\\n.form-group {\\n    line-height: 1.5;\\n}\\n\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n    <h2 class=\\\"text-center\\\">Add Author</h2>\\n\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"book.name\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Description\\\" [(ngModel)]=\\\"book.description\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Price\\\" [(ngModel)]=\\\"book.price\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field>\\n            <input matInput [matDatepicker]=\\\"picker\\\" placeholder=\\\"Publish Date\\\" [(ngModel)]=\\\"book.publishDate\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #picker></mat-datepicker>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Select Publisher\\\" [(ngModel)]=\\\"book.publisher\\\" name=\\\"publisher\\\" >\\n                <mat-option *ngFor=\\\"let publisher of publishers\\\" [value]=\\\"publisher\\\">\\n                    {{ publisher.name }}\\n                </mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Select Authors\\\"  multiple>\\n                <mat-option *ngFor=\\\"let author of authors\\\" [value]=\\\"book.authors\\\">{{author.name}}</mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n    </div>\\n    <div>\\n        <button mat-raised-button (click)=\\\"addBook()\\\" color=\\\"primary\\\">Add Book</button>\\n    </div>\\n\\n</div>\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\n\nimport {Book} from '../entity/book.model';\nimport {BookService} from '../book/book.service';\nimport {AuthorService} from '../author/author.service';\nimport {PublisherService} from '../publisher/publisher.service';\nimport {Publisher} from '../entity/publisher.model';\nimport {Author} from '../entity/author.model';\nimport {FormControl} from '@angular/forms';\n\n@Component({\n    selector: 'app-add-book',\n    styleUrls: ['./add-book.component.css'],\n    templateUrl: './add-book.component.html'\n})\nexport class AddBookComponent implements OnInit {\n\n    book: Book = new Book();\n    publishers: Publisher[];\n    authors: Author[];\n    authorsList = new FormControl();\n\n    constructor(private router: Router, private bookService: BookService, private  authorService: AuthorService,\n                private  publService: PublisherService) {\n    }\n\n\n    ngOnInit() {\n        this.publService.getPublishers()\n            .subscribe(data => {\n                this.publishers = data;\n            });\n        this.authorService.getAuthors()\n            .subscribe(data => {\n                this.authors = data;\n            });\n    }\n\n    addBook(): void {\n        this.bookService.addBook(this.book)\n            .subscribe(data => {\n                alert('Book created successfully.');\n            });\n    }\n}\n","module.exports = \"button {\\n    margin-left: 15px;\\n}\"","module.exports = \"<div class=\\\"col-md-6\\\">\\n    <h2 class=\\\"text-center\\\">Add Publisher</h2>\\n    <div>\\n        <mat-form-field class=\\\"example-form-field\\\">\\n            <input matInput type=\\\"text\\\" placeholder=\\\"Name\\\" [(ngModel)]=\\\"publisher.name\\\"/>\\n            <button mat-button *ngIf=\\\"value\\\" matSuffix mat-icon-button aria-label=\\\"Clear\\\" (click)=\\\"value=''\\\">\\n                <mat-icon>close</mat-icon>\\n            </button>\\n        </mat-form-field>\\n        <button mat-raised-button (click)=\\\"addPublisher()\\\" color=\\\"primary\\\">Add Publisher</button>\\n    </div>\\n</div>\"","import {Component} from '@angular/core';\nimport {Publisher} from '../entity/publisher.model';\nimport {Router} from '@angular/router';\nimport {PublisherService} from '../publisher/publisher.service';\n\n@Component({\n    selector: 'app-add-publisher',\n    templateUrl: './add-publisher.component.html',\n    styleUrls: ['./add-publisher.component.css']\n})\nexport class AddPublisherComponent {\n\n    publisher: Publisher = new Publisher();\n\n    constructor(private router: Router, private publisherService: PublisherService) {\n\n    }\n\n    addPublisher(): void {\n        this.publisherService.addPubl(this.publisher).subscribe(data => {\n            alert('Publisher created successfully.');\n        });\n    }\n\n\n}\n","import {NgModule} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {BookComponent} from '../book/book.component';\nimport {LoginComponent} from '../login/login.component';\nimport {PublisherComponent} from '../publisher/publisher.component';\nimport {AuthorComponent} from '../author/author.component';\nimport {AddPublisherComponent} from '../add-publisher/add-publisher.component';\nimport {AddAuthorComponent} from '../add-author/add-author.component';\nimport {AddBookComponent} from '../add-book/add-book.component';\nimport {ImportComponent} from '../import/import.component';\nimport {BookReviewComponent} from '../book-review/book-review.component';\n\n\nconst routes: Routes = [\n    {path: 'books', component: BookComponent},\n    {path: 'login', component: LoginComponent},\n    {path: 'publishers', component: PublisherComponent},\n    {path: 'authors', component: AuthorComponent},\n    {path: 'publisher', component: AddPublisherComponent},\n    {path: 'author', component: AddAuthorComponent},\n    {path: 'book', component: AddBookComponent},\n    {path: 'import', component: ImportComponent},\n    {path: 'reviews', component: BookReviewComponent}\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forRoot(routes)\n    ],\n    exports: [\n        RouterModule\n    ],\n    declarations: []\n})\nexport class AppRoutingModule {\n}\n","module.exports = \".example-button-row {\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-around;\\n}\\n\\na {\\n    margin: 10px;\\n}\\n\"","module.exports = \"<div class=\\\"container-fluid\\\">\\n    <div class=\\\"col-md-offset-1\\\">\\n        <h1 align=\\\"center\\\" colour=\\\"primary\\\">\\n            Welcome to Book-service !\\n        </h1>\\n    </div>\\n    <div>\\n        <a mat-raised-button routerLink=\\\"/books\\\" color=\\\"primary\\\">Show Books</a>\\n        <a mat-raised-button routerLink=\\\"/publishers\\\" color=\\\"primary\\\">Show Publishers</a>\\n        <a mat-raised-button routerLink=\\\"/authors\\\" color=\\\"primary\\\">Show Authors</a>\\n        <a mat-raised-button routerLink=\\\"/import\\\" color=\\\"primary\\\">Import</a>\\n    </div>\\n    <div>\\n        <a mat-raised-button routerLink=\\\"/publisher\\\" color=\\\"primary\\\">Add Publisher</a>\\n        <a mat-raised-button routerLink=\\\"/author\\\" color=\\\"primary\\\">Add Author</a>\\n        <a mat-raised-button routerLink=\\\"/book\\\" color=\\\"primary\\\">Add Book</a>\\n    </div>\\n    <router-outlet></router-outlet>\\n</div>\\n\"","import {Component} from '@angular/core';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    title = 'Bookservice';\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {BookComponent} from './book/book.component';\nimport {AppRoutingModule} from './app-routing/app-routing.module';\nimport {HttpClientModule} from '@angular/common/http';\nimport {BookService} from './book/book.service';\nimport {LoginComponent} from './login/login.component';\nimport {LoginService} from './login/login.service';\nimport {PublisherComponent} from './publisher/publisher.component';\nimport {AuthorComponent} from './author/author.component';\nimport {PublisherService} from './publisher/publisher.service';\nimport {AuthorService} from './author/author.service';\nimport {AddPublisherComponent} from './add-publisher/add-publisher.component';\nimport {AddAuthorComponent} from './add-author/add-author.component';\nimport {AddBookComponent} from './add-book/add-book.component';\nimport {ImportComponent} from './import/import.component';\nimport {ImportService} from './import/import.service';\nimport {MatIconModule, MatNativeDateModule, MatTableModule} from '@angular/material';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatInputModule} from '@angular/material/input';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatSelectModule} from '@angular/material/select';\nimport {FormsModule} from '@angular/forms';\nimport { BookReviewComponent } from './book-review/book-review.component';\nimport {BookReviewService} from './book-review/book-review.service';\n\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        BookComponent,\n        LoginComponent,\n        PublisherComponent,\n        AuthorComponent,\n        AddPublisherComponent,\n        AddAuthorComponent,\n        AddBookComponent,\n        ImportComponent,\n        BookReviewComponent\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        FormsModule,\n        MatTableModule,\n        MatButtonModule,\n        MatInputModule,\n        MatIconModule,\n        BrowserAnimationsModule,\n        MatDatepickerModule,\n        MatNativeDateModule,\n        MatSelectModule\n    ],\n    providers: [BookService, LoginService, PublisherService, AuthorService, ImportService, BookReviewService],\n    bootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","module.exports = \"table {\\n    width: 100%;\\n}\\n\\n.mat-form-field {\\n    font-size: 14px;\\n    width: 100%;\\n}\\n\"","module.exports = \"<div>\\n\\n    <table mat-table [dataSource]=\\\"authors\\\" class=\\\"mat-elevation-z8\\\">\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef> Name</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"bio\\\">\\n            <th mat-header-cell *matHeaderCellDef> Biography</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.bio}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"birthDay\\\">\\n            <th mat-header-cell *matHeaderCellDef> Birth Day</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.birthDay}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"delete\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <button mat-raised-button (click)=\\\"deleteAuthor(element)\\\" color=\\\"warn\\\">Delete</button>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n</div>\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Author} from '../entity/author.model';\nimport {AuthorService} from './author.service';\n\n@Component({\n    selector: 'app-author',\n    templateUrl: './author.component.html',\n    styleUrls: ['./author.component.css']\n})\nexport class AuthorComponent implements OnInit {\n\n    authors: Author[];\n    displayedColumns = ['id', 'name', 'bio', 'birthDay', 'delete'];\n\n    constructor(private router: Router, private authorService: AuthorService) {\n\n    }\n\n    ngOnInit() {\n        this.authorService.getAuthors()\n            .subscribe(data => {\n                this.authors = data;\n            });\n\n    }\n\n    deleteAuthor(author: Author): void {\n        this.authorService.deleteAuthor(author)\n            .subscribe(data => {\n                this.authors = this.authors.filter(u => u !== author);\n            });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {Author} from '../entity/author.model';\n\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class AuthorService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    public getAuthors() {\n        return this.http.get<Author[]>('http://localhost:8080/bookservice/api/authors');\n    }\n\n    public addAuthor(author) {\n        return this.http.post('http://localhost:8080/bookservice/api/author', author);\n    }\n\n    public deleteAuthor(author: Author) {\n        return this.http.delete(`http://localhost:8080/bookservice/api/author/${author.id.toString()}`);\n    }\n}\n","module.exports = \"\"","module.exports = \"<div>\\n    <table mat-table [dataSource]=\\\"reviews\\\" class=\\\"mat-elevation-z8\\\">\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"user\\\">\\n            <th mat-header-cell *matHeaderCellDef> User</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.user.username}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"review\\\">\\n            <th mat-header-cell *matHeaderCellDef> Review</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.review}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"rate\\\">\\n            <th mat-header-cell *matHeaderCellDef> Rate</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.rate}}</td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n\\n    </table>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {BookService} from '../book/book.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BookReviewService} from './book-review.service';\nimport {Review} from '../entity/review.model';\nimport {Book} from '../entity/book.model';\n\n@Component({\n    selector: 'app-book-review',\n    templateUrl: './book-review.component.html',\n    styleUrls: ['./book-review.component.css']\n})\nexport class BookReviewComponent implements OnInit {\n    reviews: Review[];\n    selBookId: string;\n    selBook: Book;\n    displayedColumns = ['id', 'user', 'review', 'rate'];\n\n\n    constructor(private router: Router, private bookService: BookService, private bookreviewService: BookReviewService, private route: ActivatedRoute) {\n    }\n\n    ngOnInit() {\n        this.route.queryParams.subscribe(params => {\n            this.selBookId = params.order;\n        });\n        this.bookService.getById(this.selBookId).subscribe(data => {\n            this.selBook = data;\n        });\n\n        this.bookreviewService.getBookReviews(this.selBook)\n            .subscribe(data => {\n                this.reviews = data;\n            });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Review} from '../entity/review.model';\n\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class BookReviewService {\n    private sumRates = 0.0;\n    private reviews: Review[] = [];\n\n    constructor(private http: HttpClient) {\n    }\n\n    public getBookReviews(id) {\n        return this.http.get<Review[]>(`http://localhost:8080/bookservice/api/review/book/${id}`);\n    }\n\n    public addReview(review: Review) {\n        return this.http.post(`http://localhost:8080/bookservice/api/review/`, review);\n    }\n\n    public delReview(review: Review) {\n        return this.http.delete(`http://localhost:8080/bookservice/api/review/${review.id.toString()}`);\n    }\n\n    public getRate(bookId) {\n        this.getBookReviews(bookId).subscribe(data => {\n            this.reviews = data;\n        });\n        if (this.reviews.length !== 0) {\n            this.reviews.forEach(item => {\n                this.sumRates += item.rate;\n            });\n        }\n        if (this.sumRates === 0.0) {\n            return 0.0;\n        } else {\n            return (this.sumRates / this.reviews.length);\n        }\n    }\n}\n","module.exports = \"<div>\\n\\n    <table mat-table [dataSource]=\\\"books\\\" class=\\\"mat-elevation-z8\\\">\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef> Name</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"description\\\">\\n            <th mat-header-cell *matHeaderCellDef> Description</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.description}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"price\\\">\\n            <th mat-header-cell *matHeaderCellDef> Price</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.price}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"publisher\\\">\\n            <th mat-header-cell *matHeaderCellDef> Publisher</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.publisher.name}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"publishDate\\\">\\n            <th mat-header-cell *matHeaderCellDef> Publisher</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.publishDateh}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"delete\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <button mat-raised-button (click)=\\\"deleteBook(element)\\\" color=\\\"warn\\\">Delete</button>\\n            </td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"rate\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <button mat-raised-button (click)=\\\"goToReview(element.id)\\\" color=\\\"primary\\\">{{element.rate}}</button>\\n            </td>\\n        </ng-container>\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n\\n\\n    </table>\\n</div>\\n\"","import {Component, Injectable, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\n\nimport {Book} from '../entity/book.model';\nimport {BookService} from './book.service';\nimport {BookReviewService} from '../book-review/book-review.service';\nimport {Observable} from 'rxjs';\n\n@Component({\n    selector: 'app-book',\n    templateUrl: './book.component.html',\n    styles: []\n})\nexport class BookComponent implements OnInit {\n\n    books: Book[] = [];\n    displayedColumns = ['id', 'name'/*,'description'*/, 'price', 'publisher', 'delete', 'rate'];\n\n\n    constructor(private router: Router, private bookService: BookService, private bookReview: BookReviewService) {\n\n    }\n\n    ngOnInit() {\n        this.bookService.getBooks()\n            .subscribe(data => {\n                this.books = data;\n                this.getRate(this.books);\n            });\n    }\n\n    deleteBook(book: Book): void {\n        this.bookService.deleteBook(book)\n            .subscribe(data => {\n                this.books = this.books.filter(u => u !== book);\n            });\n    }\n\n    public getRate(books: Book[]) {\n        books.forEach(book => {\n            book.rate = this.bookReview.getRate(book.id);\n        });\n        return books;\n    }\n\n    goToReview(id) {\n        this.router.navigate(['/reviews'], {\n            queryParams: {bookId: id}\n        });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {Book} from '../entity/book.model';\n\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class BookService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    public getBooks() {\n        return this.http.get<Book[]>('http://localhost:8080/bookservice/api/books');\n    }\n\n\n    public addBook(book: Book) {\n        return this.http.post<Book>('http://localhost:8080/bookservice/api/book', book);\n    }\n\n    public deleteBook(book: Book) {\n        return this.http.delete(`http://localhost:8080/bookservice/api/book/${book.id.toString()}`);\n    }\n\n    public getById(id: string) {\n        return this.http.get<Book>(`http://localhost:8080/bookservice/api/books/${id}`);\n    }\n}\n","export class Author {\n    id: number;\n    name: string;\n    bio: string;\n    birthDay: Date;\n}\n","import {Publisher} from './publisher.model';\nimport {Author} from './author.model';\n\nexport class Book {\n    id: number;\n    name: string;\n    description: string;\n    price: number;\n    publishDate: Date;\n    publisher: Publisher;\n    authors: Author[];\n    rate: number;\n}\n","export class Publisher {\n    id: number;\n    name: string;\n}\n","module.exports = \"label {\\n    display: inline-block;\\n    float: left;\\n    clear: left;\\n    width: 100px;\\n    text-align: left;\\n}\\n\\n.form-group {\\n    line-height: 2;\\n}\\n\\nbutton {\\n    margin-left: 10px;\\n}\\n\\n\"","module.exports = \"<div>\\n    <div>\\n        <mat-form-field>\\n            <mat-select placeholder=\\\"Select type of import\\\"  [(ngModel)]=\\\"selImport\\\" name=\\\"typeImport\\\">\\n                <mat-option *ngFor=\\\"let element of typeImport\\\" [value]=\\\"element\\\">\\n                    {{ element }}\\n                </mat-option>\\n            </mat-select>\\n        </mat-form-field>\\n        <button mat-raised-button (click)=\\\"import()\\\" color=\\\"primary\\\">Import</button>\\n    </div>\\n</div>\"","import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {ImportService} from './import.service';\n\n@Component({\n    selector: 'app-import',\n    templateUrl: './import.component.html',\n    styleUrls: ['./import.component.css']\n})\nexport class ImportComponent {\n\n    typeImport: string[] = ['xml', 'json'];\n    selImport: string;\n\n    constructor(private router: Router, private importService: ImportService) {\n    }\n\n    import(): void {\n        this.importService.import(this.selImport)\n            .subscribe(\n                data => {alert('Import is OK.'); },\n                    error => {alert('Import is already running!!!'); }\n            );\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class ImportService {\n\n    constructor(private http: HttpClient) {\n    }\n\n    public import(type: string) {\n        return this.http.post(`http://localhost:8080/bookservice/api/import/${type}`, type);\n    }\n}\n","module.exports = \"\"","module.exports = \"<div>\\n    <h3>Login with Username and Password</h3>\\n    <table>\\n        <tr>\\n            <td>UserModel:</td>\\n            <td>\\n                <input #username type='text' name='username' value=''>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td>Password:</td>\\n            <td>\\n                <input #password type='password' name='password'/>\\n            </td>\\n        </tr>\\n        <tr>\\n            <td colspan='2'>\\n                <button (click)=\\\"login(username.value,password.value)\\\"> Login</button>\\n            </td>\\n        </tr>\\n    </table>\\n</div>\\n\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {LoginService} from './login.service';\n\n@Component({\n    selector: 'app-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    constructor(private router: Router, private loginService: LoginService) {\n\n    }\n\n    ngOnInit() {\n    }\n\n\n    login(username, password) {\n        this.loginService.login(username, password).subscribe(() => console.log('success'), err => console.log(err));\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class LoginService {\n\n    constructor(private http: HttpClient) {\n    }\n\n\n    public login(username, password) {\n\n        const body = new URLSearchParams();\n        body.set('username', username);\n        body.set('password', password);\n        body.set('submit', 'Login');\n        const options = {\n            headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n        };\n        // const frmData = new FormData();\n        // frmData.append('username', username);\n        // frmData.append('password', password);\n        return this.http.post('http://localhost:8080/bookservice/login', body.toString(), options);\n    }\n}\n","module.exports = \"table {\\n    width: 100%;\\n}\\n\\n.mat-form-field {\\n    font-size: 14px;\\n    width: 100%;\\n}\"","module.exports = \"<div>\\n\\n    <table mat-table [dataSource]=\\\"publishers\\\" class=\\\"mat-elevation-z8\\\">\\n\\n        <ng-container matColumnDef=\\\"id\\\">\\n            <th mat-header-cell *matHeaderCellDef> Id</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"name\\\">\\n            <th mat-header-cell *matHeaderCellDef> Name</th>\\n            <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}}</td>\\n        </ng-container>\\n\\n        <ng-container matColumnDef=\\\"delete\\\">\\n            <th mat-header-cell *matHeaderCellDef></th>\\n            <td mat-cell *matCellDef=\\\"let element\\\">\\n                <button mat-raised-button (click)=\\\"deletePublisher(element)\\\" color=\\\"warn\\\">Delete</button>\\n            </td>\\n        </ng-container>\\n\\n\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n    </table>\\n</div>\"","import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Publisher} from '../entity/publisher.model';\nimport {PublisherService} from './publisher.service';\n\n@Component({\n    selector: 'app-publisher',\n    templateUrl: './publisher.component.html',\n    styleUrls: ['./publisher.component.css']\n})\nexport class PublisherComponent implements OnInit {\n\n    publishers: Publisher[];\n    displayedColumns = ['id', 'name', 'delete'];\n\n\n    constructor(private router: Router, private publisherService: PublisherService) {\n\n    }\n\n    ngOnInit() {\n        this.publisherService.getPublishers()\n            .subscribe(data => {\n                this.publishers = data;\n            });\n    }\n\n    deletePublisher(publisher: Publisher): void {\n        this.publisherService.deletePublisher(publisher)\n            .subscribe(data => {\n                this.publishers = this.publishers.filter(u => u !== publisher);\n            });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\nimport {Publisher} from '../entity/publisher.model';\n\n\nconst httpOptions = {\n    headers: new HttpHeaders({'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class PublisherService {\n\n    constructor(private http: HttpClient) {\n    }\n\n\n    public addPubl(publisher) {\n        return this.http.post('http://localhost:8080/bookservice/api/publisher', publisher);\n    }\n\n    public getPublishers() {\n        return this.http.get<Publisher[]>('http://localhost:8080/bookservice/api/publishers');\n    }\n\n    public deletePublisher(publisher: Publisher) {\n        return this.http.delete('http://localhost:8080/bookservice/api/publisher' + '/' + publisher.id.toString());\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n    .catch(err => console.log(err));\n"],"sourceRoot":""}