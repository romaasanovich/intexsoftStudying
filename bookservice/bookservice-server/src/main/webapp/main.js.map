{
  "version": 3,
  "sources": [
    "webpack:///./src/$_lazy_route_resource lazy namespace object",
    "webpack:///./src/app/add-author/add-author.component.css",
    "webpack:///./src/app/add-author/add-author.component.html",
    "webpack:///./src/app/add-author/add-author.component.ts",
    "webpack:///./src/app/add-book/add-book.component.css",
    "webpack:///./src/app/add-book/add-book.component.html",
    "webpack:///./src/app/add-book/add-book.component.ts",
    "webpack:///./src/app/add-publisher/add-publisher.component.css",
    "webpack:///./src/app/add-publisher/add-publisher.component.html",
    "webpack:///./src/app/add-publisher/add-publisher.component.ts",
    "webpack:///./src/app/app-routing/app-routing.module.ts",
    "webpack:///./src/app/app.component.css",
    "webpack:///./src/app/app.component.html",
    "webpack:///./src/app/app.component.ts",
    "webpack:///./src/app/app.module.ts",
    "webpack:///./src/app/author/author.component.css",
    "webpack:///./src/app/author/author.component.html",
    "webpack:///./src/app/author/author.component.ts",
    "webpack:///./src/app/author/author.service.ts",
    "webpack:///./src/app/book/book.component.html",
    "webpack:///./src/app/book/book.component.ts",
    "webpack:///./src/app/book/book.service.ts",
    "webpack:///./src/app/entity/author.model.ts",
    "webpack:///./src/app/entity/book.model.ts",
    "webpack:///./src/app/entity/publisher.model.ts",
    "webpack:///./src/app/login/login.component.css",
    "webpack:///./src/app/login/login.component.html",
    "webpack:///./src/app/login/login.component.ts",
    "webpack:///./src/app/login/login.service.ts",
    "webpack:///./src/app/publisher/publisher.component.css",
    "webpack:///./src/app/publisher/publisher.component.html",
    "webpack:///./src/app/publisher/publisher.component.ts",
    "webpack:///./src/app/publisher/publisher.service.ts",
    "webpack:///./src/environments/environment.ts",
    "webpack:///./src/main.ts"
  ],
  "names": [],
  "mappings": "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",
  "file": "main.js",
  "sourcesContent": [
    "function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";",
    "module.exports = \"label{\\n  display: inline-block;\\n  float: left;\\n  clear: left;\\n  width: 75px;\\n  text-align: left;\\n}\\ninput {\\n  display: inline-block;\\n  float: left;\\n}\\n.form-group {\\n  line-height: 1.5;\\n}\\n\"",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add Author</h2>\\n  <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name:</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"author.name\\\" placeholder=\\\"Name\\\" name=\\\"Name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"bio\\\">Bio:</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"author.bio\\\" placeholder=\\\"Bio\\\" name=\\\"Bio\\\" class=\\\"form-control\\\" id=\\\"bio\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"birthDay\\\">Birth Day:</label>\\n      <input type=\\\"date\\\" [(ngModel)]=\\\"birthDay\\\" placeholder=\\\"BirthDay\\\" name=\\\"BirthDay\\\" class=\\\"form-control\\\"  id = \\\"birthDay\\\" >\\n    </div>\\n\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"addAuthor()\\\">Add</button>\\n  </form>\\n</div>\\n\"",
    "import {Component} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Author} from '../entity/author.model';\nimport {AuthorService} from '../author/author.service';\n\n@Component({\n  selector: 'app-add-author',\n  templateUrl: './add-author.component.html',\n  styleUrls: ['./add-author.component.css']\n})\nexport class AddAuthorComponent {\n\n  birthDay;\n  author: Author = new Author();\n\n  constructor(private router: Router, private authorService: AuthorService) {\n      this.birthDay = new Date().toISOString().substring(0, 10);\n  }\n\n  addAuthor(): void  {\n    this.author.birthDay = this.birthDay;\n    this.authorService.addAuthor(this.author).subscribe( data => {\n      alert('Author created successfully.');\n    });\n  }\n}\n",
    "module.exports = \"label{\\n  display: inline-block;\\n  float: left;\\n  clear: left;\\n  width: 100px;\\n  text-align: left;\\n}\\n\\n.form-group {\\n  line-height: 1.5;\\n}\\n\"",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add Book</h2>\\n  <form>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name:</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"book.name\\\" placeholder=\\\"Name\\\" name=\\\"Name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"description\\\">Description:</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"book.description\\\" placeholder=\\\"Description\\\" name=\\\"Description\\\" class=\\\"form-control\\\" id=\\\"description\\\">\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"price\\\">Price :</label>\\n      <input type=\\\"price\\\" [(ngModel)]=\\\"book.price\\\" placeholder=\\\"Price\\\" name=\\\"Price\\\" class=\\\"form-control\\\"  id = \\\"price\\\" >\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"publishDate\\\">Birth Day:</label>\\n      <input type=\\\"date\\\" [(ngModel)]=\\\"book.publishDate\\\" placeholder=\\\"PublishDate\\\" name=\\\"PublishDate\\\" class=\\\"form-control\\\"  id = \\\"publishDate\\\" >\\n    </div>\\n    <br>\\n    <div class=\\\"form-group\\\">\\n      <label name =\\\"publisher\\\">Publisher:</label>\\n      <select [(ngModel)]=\\\"book.publisher\\\" name=\\\"publisher\\\">\\n        <option *ngFor=\\\"let item of publishers\\\" [ngValue]=\\\"item\\\">{{item.name}}</option>\\n      </select>\\n    </div>\\n    <br>\\n    <div class=\\\"form-group\\\">\\n      <label name =\\\"author\\\">Authors:</label>\\n      <select multiple [(ngModel)]=\\\"book.authors\\\" name=\\\"author\\\">\\n        <option *ngFor=\\\"let item of authors\\\" [ngValue]=\\\"item\\\">{{item.name}}</option>\\n      </select>\\n    </div>\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"addBook()\\\">Add</button>\\n  </form>\\n</div>\\n\"",
    "import {Component, OnInit} from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Book } from '../entity/book.model';\nimport {BookService} from '../book/book.service';\nimport {AuthorComponent} from '../author/author.component';\nimport {AuthorService} from '../author/author.service';\nimport {PublisherService} from '../publisher/publisher.service';\nimport {Publisher} from '../entity/publisher.model';\nimport {Author} from '../entity/author.model';\n\n@Component({\n  selector: 'app-add-book',\n  styleUrls: ['./add-book.component.css'],\n  templateUrl: './add-book.component.html'\n})\nexport class AddBookComponent implements OnInit {\n\n  publishDate;\n  book: Book = new Book();\n\n  publishers: Publisher[];\n  authors: Author[];\n\n  constructor(private router: Router, private bookService: BookService, private  authorService: AuthorService,\n              private  publService: PublisherService) {\n    this.publishDate = new Date().toISOString().substring(0, 10);\n    }\n\n\n  ngOnInit() {\n    this.publService.getPublishers()\n      .subscribe( data => {\n        this.publishers = data;\n      });\n    this.authorService.getAuthors()\n      .subscribe( data => {\n        this.authors = data;\n      });\n  }\n\n  addBook(): void {\n    this.book.publishDate = this.publishDate;\n    this.bookService.addBook(this.book)\n      .subscribe(data => {\n        alert('Book created successfully.');\n      });\n  }\n}\n",
    "module.exports = \"label{\\n  display: inline-block;\\n  float: left;\\n  clear: left;\\n  width: 75px;\\n  text-align: left;\\n}\\ninput {\\n  display: inline-block;\\n  float: left;\\n}\\n.form-group {\\n  line-height: 1.5;\\n}\\n\"",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2 class=\\\"text-center\\\">Add Publisher</h2>\\n  <form>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\">Name:</label>\\n      <input type=\\\"text\\\" [(ngModel)]=\\\"publisher.name\\\" placeholder=\\\"Name\\\" name=\\\"Name\\\" class=\\\"form-control\\\" id=\\\"name\\\">\\n    </div>\\n    <button class=\\\"btn btn-success\\\" (click)=\\\"addPublisher()\\\">Add</button>\\n  </form>\\n</div>\\n\"",
    "import { Component, OnInit } from '@angular/core';\nimport {Publisher} from '../entity/publisher.model';\nimport {Router} from '@angular/router';\nimport {PublisherService} from '../publisher/publisher.service';\n\n@Component({\n  selector: 'app-add-publisher',\n  templateUrl: './add-publisher.component.html',\n  styleUrls: ['./add-publisher.component.css']\n})\nexport class AddPublisherComponent  {\n\n  publisher: Publisher = new Publisher();\n\n  constructor(private router: Router, private publisherService: PublisherService) {\n\n  }\n\n  addPublisher(): void  {\n    this.publisherService.addPubl(this.publisher).subscribe( data => {\n      alert('Publisher created successfully.');\n    });\n}\n\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport {BookComponent} from '../book/book.component';\nimport {LoginComponent} from '../login/login.component';\nimport {PublisherComponent} from '../publisher/publisher.component';\nimport {AuthorComponent} from '../author/author.component';\nimport {AddPublisherComponent} from '../add-publisher/add-publisher.component';\nimport {AddAuthorComponent} from '../add-author/add-author.component';\nimport {AddBookComponent} from '../add-book/add-book.component';\n\n\nconst routes: Routes = [\n  { path: 'books', component: BookComponent},\n   { path: 'login', component: LoginComponent},\n    {path: 'publishers', component : PublisherComponent},\n      {path: 'authors', component : AuthorComponent},\n        {path: 'publisher', component : AddPublisherComponent},\n          {path: 'author', component : AddAuthorComponent},\n            {path: 'book', component : AddBookComponent}\n      ];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [\n    RouterModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n",
    "module.exports = \"\"",
    "module.exports = \"<div class=\\\"container-fluid\\\">\\n  <div class=\\\"col-md-offset-1\\\">\\n    <h1>\\n      Welcome to !\\n    </h1>\\n  </div>\\n  <div>\\n  <a routerLink=\\\"/login\\\"> Login </a>\\n  <a style=\\\"margin-left:15px\\\" routerLink=\\\"/books\\\"> List Books</a>\\n  <a style=\\\"margin-left:15px\\\" routerLink=\\\"/publishers\\\"> List Publishers</a>\\n  <a style=\\\"margin-left:15px\\\" routerLink=\\\"/authors\\\"> List Authors</a>\\n  </div>\\n  <br>\\n  <a routerLink=\\\"/publisher\\\">Add Publisher</a>\\n  <a style=\\\"margin-left:15px\\\" routerLink=\\\"/author\\\">Add Author</a>\\n  <a style=\\\"margin-left:15px\\\" routerLink=\\\"/book\\\">Add Book</a>\\n  <br/>\\n  <router-outlet></router-outlet>\\n</div>\\n\"",
    "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Bookservice';\n}\n",
    "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BookComponent } from './book/book.component';\nimport {AppRoutingModule} from './app-routing/app-routing.module';\nimport {HttpClientModule} from '@angular/common/http';\nimport {FormsModule} from '@angular/forms';\nimport {BookService} from './book/book.service';\nimport { LoginComponent } from './login/login.component';\nimport {LoginService} from './login/login.service';\nimport { PublisherComponent } from './publisher/publisher.component';\nimport { AuthorComponent } from './author/author.component';\nimport {PublisherService} from './publisher/publisher.service';\nimport {AuthorService} from './author/author.service';\nimport { AddPublisherComponent } from './add-publisher/add-publisher.component';\nimport { AddAuthorComponent } from './add-author/add-author.component';\nimport {AddBookComponent} from './add-book/add-book.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    BookComponent,\n    LoginComponent,\n    PublisherComponent,\n    AuthorComponent,\n    AddPublisherComponent,\n    AddAuthorComponent,\n    AddBookComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [BookService, LoginService, PublisherService, AuthorService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
    "module.exports = \"\"",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2> Authors </h2>\\n\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n    <tr>\\n      <th>Id</th>\\n      <th>Name</th>\\n      <th>Bio</th>\\n      <th>BirthDay</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr *ngFor=\\\"let author of authors\\\">\\n      <td>{{author.id}}</td>\\n      <td>{{author.name}}</td>\\n      <td>{{author.bio}}</td>\\n      <td>{{author.birthDay}}</td>\\n      <td><button class=\\\"btn btn-danger\\\" (click)=\\\"deleteAuthor(author)\\\"> Delete Author</button></td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"",
    "import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Author} from '../entity/author.model';\nimport {AuthorService} from './author.service';\nimport {Publisher} from '../entity/publisher.model';\n\n@Component({\n  selector: 'app-author',\n  templateUrl: './author.component.html',\n  styleUrls: ['./author.component.css']\n})\nexport class AuthorComponent implements OnInit {\n\n  authors: Author[];\n\n  constructor(private router: Router, private authorService: AuthorService) {\n\n  }\n\n  ngOnInit() {\n    this.authorService.getAuthors()\n      .subscribe(data => {\n        this.authors = data;\n      });\n\n  }\n  deleteAuthor(author: Author): void {\n      this.authorService.deleteAuthor(author)\n      .subscribe( data => {\n        this.authors = this.authors.filter(u => u !== author);\n      });\n  }\n}\n",
    "import {Injectable} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Author } from '../entity/author.model';\nimport {Publisher} from '../entity/publisher.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable()\nexport class AuthorService {\n\n  constructor(private http: HttpClient) {}\n\n  public getAuthors() {\n    return this.http.get<Author[]>('http://localhost:8080/bookservice/api/authors');\n  }\n\n  public addAuthor(author)  {\n    return this.http.post('http://localhost:8080/bookservice/api/author', author);\n  }\n\n  public deleteAuthor(author: Author)  {\n    return this.http.delete(  'http://localhost:8080/bookservice/api/author' + '/' +  author.id.toString());\n  }\n}\n",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2> Books </h2>\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n    <tr>\\n      <th>Id</th>\\n      <th>Name</th>\\n      <th>Description</th>\\n      <th>Price</th>\\n      <th>Publisher</th>\\n      <th >Publish Date</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr *ngFor=\\\"let book of books\\\">\\n      <td>{{book.id}}</td>\\n      <td>{{book.name}}</td>\\n      <td>{{book.description}}</td>\\n      <td>{{book.price}}</td>\\n      <td>{{book.publisher.name}}</td>\\n      <td>{{book.publishDate}}</td>\\n      <td><button class=\\\"btn btn-danger\\\" (click)=\\\"deleteBook(book)\\\"> Delete Book </button></td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"",
    "import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\n\nimport {Book} from '../entity/book.model';\nimport {BookService} from './book.service';\nimport {Author} from '../entity/author.model';\n\n@Component({\n  selector: 'app-book',\n  templateUrl: './book.component.html',\n  styles: []\n})\nexport class BookComponent implements OnInit {\n\n  books: Book[];\n\n  constructor(private router: Router, private bookService: BookService) {\n\n  }\n\n  ngOnInit() {\n    this.bookService.getBooks()\n      .subscribe( data => {\n        this.books = data;\n      });\n  }\n\n  deleteBook(book: Book): void {\n    this.bookService.deleteBook(book)\n      .subscribe( data => {\n        this.books = this.books.filter(u => u !== book);\n      });\n  }\n}\n",
    "import {Injectable} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Book } from '../entity/book.model';\nimport {Author} from '../entity/author.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable()\nexport class BookService {\n\n  constructor(private http: HttpClient) {}\n\n  public getBooks() {\n    return this.http.get<Book[]>('http://localhost:8080/bookservice/api/books');\n  }\n\n\n  public addBook(book: Book) {\n    return this.http.post<Book>('http://localhost:8080/bookservice/api/book', book);\n  }\n\n  public deleteBook(book: Book)  {\n    return this.http.delete(  'http://localhost:8080/bookservice/api/book' + '/' +  book.id.toString());\n  }\n\n}\n",
    "export class Author {\n  id: number;\n  name: string;\n  bio: string;\n  birthDay: Date;\n}\n",
    "import {Publisher} from './publisher.model';\nimport {Author} from './author.model';\n\nexport class Book {\n  id: number;\n  name: string;\n  description: string;\n  price: number;\n  publishDate: Date;\n  publisher: Publisher;\n  authors: Author[];\n}\n",
    "export class Publisher {\n  id: number;\n  name: string;\n}\n",
    "module.exports = \"\"",
    "module.exports = \"<div>\\n<h3>Login with Username and Password</h3>\\n  <table>\\n    <tr>\\n      <td>UserModel:</td>\\n      <td>\\n        <input #username type='text' name='username' value=''>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td>Password:</td>\\n      <td>\\n        <input #password type='password' name='password'/>\\n      </td>\\n    </tr>\\n    <tr>\\n      <td colspan='2'>\\n        <button (click)=\\\"login(username.value,password.value)\\\"> Login </button>\\n      </td>\\n    </tr>\\n  </table>\\n</div>\\n\"",
    "import { Component, OnInit } from '@angular/core';\nimport {Router} from '@angular/router';\nimport {LoginService} from './login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor(private router: Router, private loginService: LoginService) {\n\n  }\n\n  ngOnInit() {\n  }\n\n\n  login(username, password) {\n    this.loginService.login(username, password).subscribe(() => console.log('success'), err => console.log(err));\n}\n\n}\n",
    "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json'})\n};\n\n@Injectable()\nexport class LoginService {\n\n  constructor(private http: HttpClient) {\n  }\n\n\n\n\n  public login(username, password) {\n\n    const body = new URLSearchParams();\n    body.set('username', username);\n    body.set('password', password);\n    body.set('submit', 'Login');\n    const options = {\n      headers: new HttpHeaders().set('Content-Type', 'application/x-www-form-urlencoded')\n    };\n    // const frmData = new FormData();\n    // frmData.append('username', username);\n    // frmData.append('password', password);\n    return this.http.post('http://localhost:8080/bookservice/login', body.toString(), options);\n  }\n}\n",
    "module.exports = \"\"",
    "module.exports = \"<div class=\\\"col-md-6\\\">\\n  <h2> Publishers </h2>\\n\\n  <table class=\\\"table table-striped\\\">\\n    <thead>\\n    <tr>\\n      <th>Id</th>\\n      <th>Name</th>\\n    </tr>\\n    </thead>\\n    <tbody>\\n    <tr *ngFor=\\\"let publ of publishers\\\">\\n      <td>{{publ.id}}</td>\\n      <td>{{publ.name}}</td>\\n      <td><button class=\\\"btn btn-danger\\\" (click)=\\\"deletePublisher(publ)\\\"> Delete Publisher</button></td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n\"",
    "import {Component, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Publisher} from '../entity/publisher.model';\nimport {PublisherService} from './publisher.service';\n\n@Component({\n  selector: 'app-publisher',\n  templateUrl: './publisher.component.html',\n  styleUrls: ['./publisher.component.css']\n})\nexport class PublisherComponent implements OnInit {\n\n  publishers: Publisher[];\n\n  constructor(private router: Router, private publisherService: PublisherService) {\n\n  }\n\n  ngOnInit() {\n    this.publisherService.getPublishers()\n      .subscribe( data => {\n        this.publishers = data;\n      });\n  }\n\n  deletePublisher(publisher: Publisher): void {\n    this.publisherService.deletePublisher(publisher)\n      .subscribe( data => {\n        this.publishers = this.publishers.filter(u => u !== publisher);\n      });\n  }\n}\n",
    "import {Injectable} from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Publisher } from '../entity/publisher.model';\n\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\n@Injectable()\nexport class PublisherService {\n\n  constructor(private http: HttpClient) {}\n\n\n  public addPubl(publisher)  {\n    return this.http.post('http://localhost:8080/bookservice/api/publisher', publisher);\n  }\n\n  public getPublishers() {\n    return this.http.get<Publisher[]>('http://localhost:8080/bookservice/api/publishers');\n  }\n\n  public deletePublisher(publisher: Publisher)  {\n    return this.http.delete(  'http://localhost:8080/bookservice/api/publisher' + '/' +  publisher.id.toString());\n  }\n\n}\n",
    "// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n",
    "import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"
  ],
  "sourceRoot": ""
}